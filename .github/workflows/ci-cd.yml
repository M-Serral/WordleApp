name: CI/CD Pipeline

on:
  pull_request:
    branches:
      - master
  push:
    branches:
      - master

jobs:
  ci:
    name: Run Tests and generate JaCoCo report
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    env:
      SERVER_PORT: 8080

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: maven-

      - name: Compile project
        run: mvn clean compile

      - name: Install Chrome & ChromeDriver
        run: |
          sudo apt update
          sudo apt install -y google-chrome-stable unzip curl jq

          # Get Chrome version
          CHROME_VERSION=$(google-chrome --version | grep -oP '[0-9]+\.[0-9]+\.[0-9]+' | head -1)
          echo "Chrome version: $CHROME_VERSION"

          # Get compatible ChromeDriver version
          CHROMEDRIVER_VERSION=$(curl -sS "https://googlechromelabs.github.io/chrome-for-testing/latest-patch-versions-per-build-with-downloads.json" | jq -r ".builds[\"$CHROME_VERSION\"].version")

          if [[ -z "$CHROMEDRIVER_VERSION" ]]; then
            echo "No compatible ChromeDriver version was found for $CHROME_VERSION"
            exit 1
          fi

          echo "ChromeDriver version: $CHROMEDRIVER_VERSION"

          # Download ChromeDriver
          curl -sS -o chromedriver.zip "https://storage.googleapis.com/chrome-for-testing-public/$CHROMEDRIVER_VERSION/linux64/chromedriver-linux64.zip"

          # Check if the download was successful
          if ! unzip -tq chromedriver.zip; then
            echo "Error: The downloaded file is not a valid ZIP"
            exit 1
          fi

          # Extract ChromeDriver
          sudo unzip -o chromedriver.zip -d /usr/local/bin/

          # Verify extracted structure
          if [ -f "/usr/local/bin/chromedriver-linux64/chromedriver" ]; then
            sudo mv /usr/local/bin/chromedriver-linux64/chromedriver /usr/local/bin/chromedriver
            sudo chmod +x /usr/local/bin/chromedriver
            echo "ChromeDriver installed successfully."
          else
            echo "Error: ChromeDriver binary not found after extraction!"
            exit 1
          fi

          # Clean up unnecessary files
          sudo rm -rf chromedriver.zip /usr/local/bin/chromedriver-linux64

          # Verify the installation
          chromedriver --version

      - name: Start application in background
        run: mvn spring-boot:run &
        env:
          SPRING_PROFILES_ACTIVE: test

      - name: Wait for application to start
        run: |
          for i in {1..30}; do
            nc -z localhost 8080 && echo "App is up!" && break
            echo "Waiting for app to be ready..."
            sleep 3
          done

      - name: Run tests
        run: mvn clean verify -Dserver.port=${{ env.SERVER_PORT }} jacoco:report jacoco:report-aggregate

      - name: Save JaCoCo Report
        uses: actions/upload-artifact@v4
        with:
          name: JaCoCo Report
          path: target/site/jacoco/

      - name: Save compiled classes
        uses: actions/upload-artifact@v4
        with:
          name: Compiled Classes
          path: target/classes/

  sonar:
    name: SonarCloud Analysis
    runs-on: ubuntu-latest
    needs: ci
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: maven-

      - name: Download JaCoCo Report
        uses: actions/download-artifact@v4
        with:
          name: JaCoCo Report
          path: target/site/jacoco/

      - name: Download compiled classes
        uses: actions/download-artifact@v4
        with:
          name: Compiled Classes
          path: target/classes/

      - name: Compile and Run SonarCloud Analysis
        run: |
          mvn sonar:sonar -Dsonar.projectKey=M-Serral_WordleApp \
                          -Dsonar.organization=m-serral \
                          -Dsonar.host.url=https://sonarcloud.io \
                          -Dsonar.token=${{ secrets.SONARCLOUD_TOKEN }} \
                          -Dsonar.java.binaries=target/classes \
                          -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml

      - name: Download Sonar Report
        run: |
          curl -s -u ${{ secrets.SONARCLOUD_TOKEN }} \
          "https://sonarcloud.io/api/measures/component?component=M-Serral_WordleApp&metricKeys=coverage,bugs,vulnerabilities,code_smells" -o sonar_report.json

      - name: Upload Sonar Report
        uses: actions/upload-artifact@v4
        with:
          name: SonarCloud Report
          path: sonar_report.json


  cd:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Build with Maven
        run: mvn clean package -DskipTests

      - name: Get project version from pom.xml
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Get Git SHA
        run: |
          GIT_SHA=$(git rev-parse --short HEAD)
          echo "GIT_SHA=$GIT_SHA" >> $GITHUB_ENV

      - name: Build and push Docker image
        run: |
          docker build -t ***/wordleapp:${{ env.VERSION }}-${{ env.GIT_SHA }} .

      - name: Login to DockerHub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Push Docker Image
        run: docker push mserral/wordleapp:${{ env.VERSION }}