name: Test Tag Push

on:
  workflow_dispatch:

jobs:
  test-tag:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3


      - name: Get project version from pom.xml
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          

      - name: Create and publish Git Tag via GitHub API with PR title
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
          VERSION: ${{ env.VERSION }}
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
      
          TAG_NAME="v$VERSION"
          COMMIT_SHA=$(git rev-parse HEAD)
      
          # Get the latest merged PR title targeting master
          PR_TITLE=$(curl -s -H "Authorization: token $GH_TOKEN" \
            "https://api.github.com/repos/M-Serral/WordleApp/pulls?state=closed&base=master&sort=updated&direction=desc" \
            | jq -r '[.[] | select(.merged_at != null)][0].title')
      
          if [ -z "$PR_TITLE" ] || [ "$PR_TITLE" = "null" ]; then
            PR_TITLE="Release $TAG_NAME"
          fi
      
          # Create local tag
          git tag -a "$TAG_NAME" -m "$PR_TITLE"
      
          # Push tag to GitHub via API
          curl -X POST \
            -H "Authorization: token $GH_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/M-Serral/WordleApp/git/refs \
            -d @- <<EOF
          {
            "ref": "refs/tags/$TAG_NAME",
            "sha": "$COMMIT_SHA"
          }
          EOF


      - name: Read release notes
        id: release_notes
        run: |
          RELEASE_BODY="$(cat RELEASE_NOTES.md)"
          echo "RELEASE_BODY<<EOF" >> $GITHUB_ENV
          echo "$RELEASE_BODY" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Create and publish GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ env.VERSION }}
          name: WordleApp v${{ env.VERSION }}
          body: ${{ env.RELEASE_BODY }}
          files: |
            docker-compose.yml
            Dockerfile
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}


