<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8"/>
    <title>Wordle Game</title>
    <link rel="stylesheet" href="/css/main.css">

</head>
<body>
<h1>WELCOME TO WORDLE</h1>

<div id="board">
    <!-- Row 0 -->
    <div class="tile" id="tile-0-0"></div>
    <div class="tile" id="tile-0-1"></div>
    <div class="tile" id="tile-0-2"></div>
    <div class="tile" id="tile-0-3"></div>
    <div class="tile" id="tile-0-4"></div>

    <!-- Row 1 -->
    <div class="tile" id="tile-1-0"></div>
    <div class="tile" id="tile-1-1"></div>
    <div class="tile" id="tile-1-2"></div>
    <div class="tile" id="tile-1-3"></div>
    <div class="tile" id="tile-1-4"></div>

    <!-- Row 2 -->
    <div class="tile" id="tile-2-0"></div>
    <div class="tile" id="tile-2-1"></div>
    <div class="tile" id="tile-2-2"></div>
    <div class="tile" id="tile-2-3"></div>
    <div class="tile" id="tile-2-4"></div>

    <!-- Row 3 -->
    <div class="tile" id="tile-3-0"></div>
    <div class="tile" id="tile-3-1"></div>
    <div class="tile" id="tile-3-2"></div>
    <div class="tile" id="tile-3-3"></div>
    <div class="tile" id="tile-3-4"></div>

    <!-- Row 4 -->
    <div class="tile" id="tile-4-0"></div>
    <div class="tile" id="tile-4-1"></div>
    <div class="tile" id="tile-4-2"></div>
    <div class="tile" id="tile-4-3"></div>
    <div class="tile" id="tile-4-4"></div>

    <!-- Row 5 -->
    <div class="tile" id="tile-5-0"></div>
    <div class="tile" id="tile-5-1"></div>
    <div class="tile" id="tile-5-2"></div>
    <div class="tile" id="tile-5-3"></div>
    <div class="tile" id="tile-5-4"></div>
</div>

<div id="result-container">
    <p id="result"></p>
    <button id="resetButton">Reset Game</button>
</div>

<div id="keyboard">
    <div class="keyboard-row" id="keyboard-row-1"></div>
    <div class="keyboard-row" id="keyboard-row-2"></div>
    <div class="keyboard-row" id="keyboard-row-3"></div>
</div>


<script>
    let currentRow = 0;
    let currentCol = 0;
    let isGameOver = false;
    const guessRows = [
        ['', '', '', '', ''],
        ['', '', '', '', ''],
        ['', '', '', '', ''],
        ['', '', '', '', ''],
        ['', '', '', '', ''],
        ['', '', '', '', '']
    ];
    const letterColors = {};

    const keysRow1 = ['Q','W','E','R','T','Y','U','I','O','P'];
    const keysRow2 = ['A','S','D','F','G','H','J','K','L','Ñ'];
    const keysRow3 = ['Z','X','C','V','B','N','M'];

    initBoard();
    initKeyboard();
    initTileClickHandlers();

    document.addEventListener('keydown', handleKeyPress);
    const resetButton = document.getElementById('resetButton');
    resetButton.addEventListener('click', resetGame);

    function initTileClickHandlers() {
        for (let row = 0; row < 6; row++) {
            for (let col = 0; col < 5; col++) {
                const tile = document.getElementById(`tile-${row}-${col}`);
                tile.addEventListener('click', function(){
                    if (row === currentRow && !isGameOver) {
                        currentCol = col;
                        updateActiveCell();
                    }
                });
            }
        }
    }

    function initKeyboard() {
        createKeyboardRow(keysRow1, document.getElementById('keyboard-row-1'));
        createKeyboardRow(keysRow2, document.getElementById('keyboard-row-2'));
        createKeyboardRow(keysRow3, document.getElementById('keyboard-row-3'));
    }
    function createKeyboardRow(keysArray, container) {
        keysArray.forEach(letter => {
            const btn = document.createElement('button');
            btn.textContent = letter;
            btn.classList.add('key');
            btn.dataset.letter = letter;
            btn.addEventListener('click', () => handleKeyClick(letter));
            container.appendChild(btn);
            letterColors[letter] = 'grey';
        });
    }
    function handleKeyClick(letter) {
        if (isGameOver) return;
        placeLetter(letter);
    }
    function handleKeyPress(e) {
        if (isGameOver) return;
        const key = e.key;
        if (key === 'ArrowLeft') {
            if (currentCol > 0) {
                currentCol--;
                updateActiveCell();
            }
            return;
        } else if (key === 'ArrowRight') {
            if (currentCol < 4) {
                currentCol++;
                updateActiveCell();
            }
            return;
        }
        if (key.match(/^[a-zA-ZñÑ]$/)) {
            placeLetter(key.toUpperCase());
        } else if (key === 'Backspace') {
            removeLetter();
        } else if (key === 'Enter') {
            if (currentCol === 5 || guessRows[currentRow].every(l => l !== '')) {
                submitGuess();
            } else {
                alert('Please complete all 5 letters before pressing Enter.');
            }
        }
    }
    function placeLetter(letter) {
        if (isGameOver) return;
        // Insert letter and auto-move if not in last cell
        if (currentCol < 4) {
            guessRows[currentRow][currentCol] = letter;
            document.getElementById(`tile-${currentRow}-${currentCol}`).textContent = letter;
            currentCol++;
            updateActiveCell();
        } else if (currentCol === 4) {
            guessRows[currentRow][currentCol] = letter;
            document.getElementById(`tile-${currentRow}-${currentCol}`).textContent = letter;
            // When last cell is filled, remove active highlight
            updateActiveCell(false);
        }
    }
    function removeLetter() {
        if (isGameOver) return;
        // If last cell is not active (i.e. focus was removed after entering letter)
        const currentTile = document.getElementById(`tile-${currentRow}-${currentCol}`);
        if (currentCol === 4 && !currentTile.classList.contains('active')) {
            currentCol = 4;
            updateActiveCell();
        }
        const activeTile = document.getElementById(`tile-${currentRow}-${currentCol}`);
        if (guessRows[currentRow][currentCol] !== '') {
            // If active cell has a letter, remove it and stay in place
            guessRows[currentRow][currentCol] = '';
            activeTile.textContent = '';
        } else if (currentCol > 0) {
            // If empty and not first, move left and clear that cell
            currentCol--;
            guessRows[currentRow][currentCol] = '';
            document.getElementById(`tile-${currentRow}-${currentCol}`).textContent = '';
        }
        updateActiveCell();
    }
    function submitGuess() {
        const guess = guessRows[currentRow].join('');
        fetch(`/api/wordle/guess?guess=${guess}`, { method: "POST" })
                .then(response => {
                    if (!response.ok) {
                        return response.text().then(text => { throw new Error(text); });
                    }
                    return response.text();
                })
                .then(data => {
                    updateUI(data, guess);
                })
                .catch(error => {
                    let errorMessage = error.message;

                    if (errorMessage.includes("Not in the list of valid words")) {
                        errorMessage = "Not in the list of valid words.";
                        animateInvalidGuess();
                        animateErrorMessage();
                    }

                    document.getElementById("result").innerText = errorMessage;
                });
    }

    function updateUI(responseText, guess) {
        const resultElement = document.getElementById("result");
        let [message, hintPart] = responseText.split("Hint:");
        message = message.trim();
        let hint = hintPart ? hintPart.trim() : '';

        document.querySelectorAll('.tile.active').forEach(t => t.classList.remove('active'));

        let arrowIndex = hint.indexOf("→");
        if (arrowIndex === -1) {
            arrowIndex = hint.indexOf("->");
        }
        let extractedHint = "";
        if (arrowIndex !== -1) {
            extractedHint = hint.substring(arrowIndex + 2).trim();
        }
        resultElement.innerText = message;
        if (extractedHint) {
            colorRow(extractedHint, currentRow, guess);
        }
        if (message.includes("GAME OVER!") || message.includes("CORRECT!")) {
            isGameOver = true;
            resetButton.style.display = "block";
            document.querySelectorAll('.tile.active').forEach(t => t.classList.remove('active'));
        } else {
            currentRow++;
            currentCol = 0;
            updateActiveCell();
            if (currentRow > 5) {
                isGameOver = true;
                resetButton.style.display = "block";
            }
        }
    }

    function colorRow(hint, rowIndex, guess) {
        const hintArray = hint.split(" "); // e.g., "N O _ _ E" → ["N","O","_","_","E"]
        for (let i = 0; i < 5; i++) {
            const tile = document.getElementById(`tile-${rowIndex}-${i}`);
            const ch = hintArray[i];
            const letter = guess[i] ? guess[i].toUpperCase() : '';
            if (/[A-ZÑ]/.test(ch)) {
                tile.classList.add('green');
                updateKeyColor(letter, 'green');
            } else if (ch === '?') {
                tile.classList.add('orange');
                updateKeyColor(letter, 'orange');
            } else if (ch === '_') {
                // Instead of adding "black-tile", we add "gray" to the board tile.
                tile.classList.add('gray');
                updateKeyColor(letter, 'black');  // For keyboard keys, still mark as "black".
            }
        }
    }


    function updateKeyColor(letter, newColor) {
        const priority = { 'grey': 1, 'black': 2, 'orange': 3, 'green': 4 };
        let current = letterColors[letter] || 'grey';
        if (priority[newColor] > priority[current]) {
            letterColors[letter] = newColor;
            const keyButton = document.querySelector(`button.key[data-letter="${letter}"]`);
            if (keyButton) {
                keyButton.classList.remove('key-black', 'key-orange', 'key-green');
                if (newColor === 'black') {
                    keyButton.classList.add('key-black');
                } else if (newColor === 'orange') {
                    keyButton.classList.add('key-orange');
                } else if (newColor === 'green') {
                    keyButton.classList.add('key-green');
                }
            }
        }
    }
    function resetGame() {
        fetch("/api/wordle/reset", { method: "POST" })
                .then(() => location.reload());
    }

    function updateActiveCell(setActive = true) {
        for (let col = 0; col < 5; col++) {
            document.getElementById(`tile-${currentRow}-${col}`).classList.remove('active');
        }
        if (setActive) {
            const activeTile = document.getElementById(`tile-${currentRow}-${currentCol}`);
            if (activeTile && !isGameOver) {
                activeTile.classList.add('active');
            }
        }
    }

    function animateInvalidGuess() {
        for (let col = 0; col < 5; col++) {
            const tile = document.getElementById(`tile-${currentRow}-${col}`);
            if (tile) {
                tile.textContent = "";
                tile.classList.add("shake");

                // Remove the animation after finishing (so that it can be repeated if it fails again).
                tile.addEventListener("animationend", () => {
                    tile.classList.remove("shake");
                }, { once: true });
            }
        }
        // Restart the visual and logical cursor
        currentTile = 0;
        currentCol = 0;

        updateActiveCell(); // already makes the cursor visual set correctly
    }

    function animateErrorMessage() {
        const resultElem = document.getElementById("result");

        // Removes any previous animation
        resultElem.classList.remove("error-flash");

        // Force reflow to restart animation
        void resultElem.offsetWidth;

        // Add class with animation
        resultElem.classList.add("error-flash");

        // Automatic cleaning at the end of animation
        resultElem.addEventListener("animationend", () => {
            resultElem.classList.remove("error-flash");
        }, { once: true });
    }


    function initBoard() {
        updateActiveCell();
    }


    function rowHasFilledCells(row) {
        return Array.from(row.querySelectorAll('.cell')).some(cell => cell.textContent.trim() !== "");
    }
</script>
</body>
</html>
