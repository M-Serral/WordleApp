<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8"/>
    <title>Wordle Game</title>
    <link rel="stylesheet" href="/css/main.css">

</head>
<body>

<div id="top-buttons" style="display: flex; justify-content: space-between; align-items: center; width: 800px; margin-top: 10px;">
    <button onclick="window.location.href='/ranking'" style="padding: 10px 15px;">
        üî¢ Ranking
    </button>
    <h1>WELCOME TO WORDLE</h1>
    <button onclick="window.location.href='/leaderboard'" style="padding: 10px 15px;">
        üèÜ Leaderboard
    </button>
</div>
<div id="user-info" style="position: absolute; top: 10px; left: 10px; font-size: 1.2em;">
    <!-- Username will appear here -->
</div>
<div id="username-modal" class="modal">
    <div class="modal-content">
        <label for="username-input">Enter your name to start playing Wordle:</label>
        <input type="text" id="username-input" maxlength="20" />
        <div id="username-error" class="username-error"></div>
        <button id="username-submit">Start</button>
    </div>
</div>

<div id="board">
    <!-- Row 0 -->
    <div class="tile" id="tile-0-0"></div>
    <div class="tile" id="tile-0-1"></div>
    <div class="tile" id="tile-0-2"></div>
    <div class="tile" id="tile-0-3"></div>
    <div class="tile" id="tile-0-4"></div>

    <!-- Row 1 -->
    <div class="tile" id="tile-1-0"></div>
    <div class="tile" id="tile-1-1"></div>
    <div class="tile" id="tile-1-2"></div>
    <div class="tile" id="tile-1-3"></div>
    <div class="tile" id="tile-1-4"></div>

    <!-- Row 2 -->
    <div class="tile" id="tile-2-0"></div>
    <div class="tile" id="tile-2-1"></div>
    <div class="tile" id="tile-2-2"></div>
    <div class="tile" id="tile-2-3"></div>
    <div class="tile" id="tile-2-4"></div>

    <!-- Row 3 -->
    <div class="tile" id="tile-3-0"></div>
    <div class="tile" id="tile-3-1"></div>
    <div class="tile" id="tile-3-2"></div>
    <div class="tile" id="tile-3-3"></div>
    <div class="tile" id="tile-3-4"></div>

    <!-- Row 4 -->
    <div class="tile" id="tile-4-0"></div>
    <div class="tile" id="tile-4-1"></div>
    <div class="tile" id="tile-4-2"></div>
    <div class="tile" id="tile-4-3"></div>
    <div class="tile" id="tile-4-4"></div>

    <!-- Row 5 -->
    <div class="tile" id="tile-5-0"></div>
    <div class="tile" id="tile-5-1"></div>
    <div class="tile" id="tile-5-2"></div>
    <div class="tile" id="tile-5-3"></div>
    <div class="tile" id="tile-5-4"></div>
</div>

<div id="result-container">
    <p id="result"></p>
    <button id="resetButton">Reset Game</button>
</div>

<div id="keyboard">
    <div class="keyboard-row" id="keyboard-row-1"></div>
    <div class="keyboard-row" id="keyboard-row-2"></div>
    <div class="keyboard-row" id="keyboard-row-3"></div>
</div>

<script>
    let currentRow = 0;
    let currentCol = 0;
    let isGameOver = false;
    const guessRows = [
        ['', '', '', '', ''],
        ['', '', '', '', ''],
        ['', '', '', '', ''],
        ['', '', '', '', ''],
        ['', '', '', '', ''],
        ['', '', '', '', '']
    ];
    const letterColors = {};

    const keysRow1 = ['Q','W','E','R','T','Y','U','I','O','P'];
    const keysRow2 = ['A','S','D','F','G','H','J','K','L','√ë'];
    const keysRow3 = ['Z','X','C','V','B','N','M'];

    initBoard();
    initKeyboard();
    initTileClickHandlers();

    document.addEventListener("DOMContentLoaded", async function () {
        await fetch("/api/wordle/init"); // Ensures that the backend has SESSION_ID

        const wasCleared = await checkServerRestart(); // Checks if the server has been restarted

        await initializeUsername(); // ALWAYS runs

        // If the server was restarted, we show the prompt again.
        if (wasCleared) {
            await initializeUsername();// forcing it again
        }

        displayUsername();
        restoreGuesses();

        // Visual reinforcement after restoring the game
        if (sessionStorage.getItem("gameEnded") === "true") {
            isGameOver = true;
            resetButton.style.display = "block";
            document.querySelectorAll('.tile.active').forEach(t => t.classList.remove('active'));
            console.log("üîÅ Restaurando bot√≥n reset tras volver del leaderboard");
        }
    });
    document.addEventListener('keydown', handleKeyPress);
    const resetButton = document.getElementById('resetButton');
    resetButton.addEventListener('click', resetGame);

    function restoreGuesses() {
        document.querySelectorAll('.tile.active').forEach(t => t.classList.remove('active')); // limpiar bordes

        const storedGuesses = JSON.parse(sessionStorage.getItem("wordleGuesses") || "[]");

        storedGuesses.forEach((entry, index) => {
            const guess = entry.word.toUpperCase();
            const hint = entry.hint || "_ _ _ _ _";

            guessRows[index] = guess.split('');
            for (let i = 0; i < guess.length; i++) {
                const tile = document.getElementById(`tile-${index}-${i}`);
                tile.textContent = guess[i];
            }

            colorRow(hint, index, guess);
        });

        currentRow = storedGuesses.length;
        currentCol = 0;
        updateActiveCell();

        const gameEndedFlag = sessionStorage.getItem("gameEnded");
        const lostOrCompleted = storedGuesses.length === 6;

        if (gameEndedFlag === "true" || lostOrCompleted) {
            isGameOver = true;
            sessionStorage.setItem("gameEnded", "true");
            resetButton.style.display = "block";
            document.querySelectorAll('.tile.active').forEach(t => t.classList.remove('active'));
        }

        // WE FORCE the button to be displayed in any case after restoring if applicable
        if (sessionStorage.getItem("gameEnded") === "true") {
            resetButton.style.display = "block";
        }
    }



    async function checkServerRestart() {
        try {
            const response = await fetch("/api/wordle/session-id");
            const serverSessionId = await response.text();

            const localSessionId = sessionStorage.getItem("serverSessionId");

            if (!localSessionId) {
                // First time saved, don't delete it yet.
                sessionStorage.setItem("serverSessionId", serverSessionId);
            } else if (localSessionId !== serverSessionId) {
                // Only if there was already one, and it changed, we assume it is a new server.
                sessionStorage.clear();
                sessionStorage.setItem("serverSessionId", serverSessionId);
                return true;
            }

            return false;
        } catch (e) {
            console.error("Failed to fetch session ID", e);
            return false;
        }
    }


    async function initializeUsername() {
        const hasInitialized = sessionStorage.getItem("initialized");

        if (!sessionStorage.getItem("username") || !hasInitialized) {
            const modal = document.getElementById("username-modal");
            const input = document.getElementById("username-input");
            const submit = document.getElementById("username-submit");
            const error = document.getElementById("username-error");

            modal.style.display = "flex";
            error.classList.remove("visible");
            error.textContent = "";

            input.addEventListener("input", () => {
                input.value = input.value.replace(/[^a-zA-Z0-9√±√ë]/g, '');
                error.textContent = "";
                error.classList.remove("visible");
            });

            // Enter = button
            input.addEventListener("keydown", (event) => {
                if (event.key === "Enter") {
                    submit.click();
                }
            });

            return new Promise((resolve) => {
                submit.addEventListener("click", () => {
                    const username = input.value.trim();
                    if (!username) {
                        error.textContent = "You must enter a name to continue.";
                        error.classList.add("visible");
                        return;
                    }

                    error.textContent = "";
                    error.classList.remove("visible");

                    sessionStorage.setItem("username", username);
                    sessionStorage.setItem("initialized", "true");
                    modal.style.display = "none";
                    fetch(`/api/wordle/reset?username=${encodeURIComponent(username)}`, { method: "POST" });
                    resolve();
                });
            });
        }
    }


    function displayUsername() {
        const user = sessionStorage.getItem("username");
        if (user) {
            const userInfoDiv = document.getElementById("user-info");
            userInfoDiv.textContent = `üë§ ${user}`;
        }
    }


    function initTileClickHandlers() {
        for (let row = 0; row < 6; row++) {
            for (let col = 0; col < 5; col++) {
                const tile = document.getElementById(`tile-${row}-${col}`);
                tile.addEventListener('click', function(){
                    if (row === currentRow && !isGameOver) {
                        currentCol = col;
                        updateActiveCell();
                    }
                });
            }
        }
    }

    function initKeyboard() {
        createKeyboardRow(keysRow1, document.getElementById('keyboard-row-1'));
        createKeyboardRow(keysRow2, document.getElementById('keyboard-row-2'));
        createKeyboardRow(keysRow3, document.getElementById('keyboard-row-3'));
    }
    function createKeyboardRow(keysArray, container) {
        keysArray.forEach(letter => {
            const btn = document.createElement('button');
            btn.textContent = letter;
            btn.classList.add('key');
            btn.dataset.letter = letter;
            btn.addEventListener('click', () => handleKeyClick(letter));
            container.appendChild(btn);
            letterColors[letter] = 'grey';
        });
    }
    function handleKeyClick(letter) {
        if (isGameOver) return;
        placeLetter(letter);
    }

    function isModalActive() {
        const modal = document.getElementById("username-modal");
        return modal && modal.style.display === "flex";
    }

    function handleKeyPress(e) {
        if (isModalActive()) return;
        if (isGameOver) return;
        const key = e.key;
        if (key === 'ArrowLeft') {
            if (currentCol > 0) {
                currentCol--;
                updateActiveCell();
            }
            return;
        } else if (key === 'ArrowRight') {
            if (currentCol < 4) {
                currentCol++;
                updateActiveCell();
            }
            return;
        }
        if (key.match(/^[a-zA-Z√±√ë]$/)) {
            placeLetter(key.toUpperCase());
        } else if (key === 'Backspace') {
            removeLetter();
        } else if (key === 'Enter') {
            if (guessRows[currentRow].some(l => l !== '')) {
            submitGuess();
            }
        }
    }
    function placeLetter(letter) {
        if (isGameOver) return;
        // Insert letter and auto-move if not in last cell
        if (currentCol < 4) {
            guessRows[currentRow][currentCol] = letter;
            document.getElementById(`tile-${currentRow}-${currentCol}`).textContent = letter;
            currentCol++;
            updateActiveCell();
        } else if (currentCol === 4) {
            guessRows[currentRow][currentCol] = letter;
            document.getElementById(`tile-${currentRow}-${currentCol}`).textContent = letter;
            // When last cell is filled, remove active highlight
            updateActiveCell(false);
        }
    }
    function removeLetter() {
        if (isGameOver) return;
        // If last cell is not active (i.e. focus was removed after entering letter)
        const currentTile = document.getElementById(`tile-${currentRow}-${currentCol}`);
        if (currentCol === 4 && !currentTile.classList.contains('active')) {
            currentCol = 4;
            updateActiveCell();
        }
        const activeTile = document.getElementById(`tile-${currentRow}-${currentCol}`);
        if (guessRows[currentRow][currentCol] !== '') {
            // If active cell has a letter, remove it and stay in place
            guessRows[currentRow][currentCol] = '';
            activeTile.textContent = '';
        } else if (currentCol > 0) {
            // If empty and not first, move left and clear that cell
            currentCol--;
            guessRows[currentRow][currentCol] = '';
            document.getElementById(`tile-${currentRow}-${currentCol}`).textContent = '';
        }
        updateActiveCell();
    }

    function submitGuess() {
        const guess = guessRows[currentRow].join('');
        const username = sessionStorage.getItem("username");

        if (!username) {
            alert("‚ö†Ô∏è Username is missing. Please reload and re-enter your name.");
            return;
        }

        fetch(`/api/wordle/guess?guess=${guess}`, { method: "POST" })
                .then(response => {
                    if (!response.ok) {
                        return response.text().then(text => { throw new Error(text); });
                    }
                    return response.text();
                })
                .then(data => {
                    const [message, hintPart] = data.split("Hint:");
                    const hint = hintPart ? hintPart.trim().split("‚Üí")[1].trim() : null;

                    // Save only valid words
                    let previousGuesses = JSON.parse(sessionStorage.getItem("wordleGuesses") || "[]");
                    previousGuesses.push({ word: guess, hint });
                    sessionStorage.setItem("wordleGuesses", JSON.stringify(previousGuesses));

                    updateUI(data, guess);
                })
                .catch(error => {
                    let errorMessage = error.message;

                    if (errorMessage.includes("Invalid input: The word must be 5 letters long.")) {
                        errorMessage = "Invalid input: The word must be 5 letters long.";
                    } else if (errorMessage.includes("Not in the list of valid words")) {
                        errorMessage = "Not in the list of valid words.";
                    }

                    animateInvalidGuess();
                    animateErrorMessage();
                    document.getElementById("result").innerText = errorMessage;
                });
    }

    function updateUI(responseText, guess) {
        const resultElement = document.getElementById("result");
        let [message, hintPart] = responseText.split("Hint:");
        message = message.trim();
        let hint = hintPart ? hintPart.trim() : '';

        console.log("üîé Mensaje recibido del backend:", message);

        document.querySelectorAll('.tile.active').forEach(t => t.classList.remove('active'));

        let arrowIndex = hint.indexOf("‚Üí");
        if (arrowIndex === -1) {
            arrowIndex = hint.indexOf("->");
        }
        let extractedHint = "";
        if (arrowIndex !== -1) {
            extractedHint = hint.substring(arrowIndex + 2).trim();
        }
        resultElement.innerText = message;
        if (extractedHint) {
            colorRow(extractedHint, currentRow, guess);
        }

        const maxedOut = currentRow === 5;

        if (message.includes("GAME OVER!") || message.includes("CORRECT!") || maxedOut) {
            console.log("‚úÖ Se marca gameEnded en sessionStorage");
            isGameOver = true;
            sessionStorage.setItem("gameEnded", "true");
            resetButton.style.display = "block";
            document.querySelectorAll('.tile.active').forEach(t => t.classList.remove('active'));
            currentRow++;
        } else {
            currentRow++;
            currentCol = 0;
            updateActiveCell();
            sessionStorage.removeItem("gameEnded");
        }
    }

    function colorRow(hint, rowIndex, guess) {
        const hintArray = hint.split(" "); // e.g., "N O _ _ E" ‚Üí ["N","O","_","_","E"]
        for (let i = 0; i < 5; i++) {
            const tile = document.getElementById(`tile-${rowIndex}-${i}`);
            const ch = hintArray[i];
            const letter = guess[i] ? guess[i].toUpperCase() : '';
            if (/[A-Z√ë]/.test(ch)) {
                tile.classList.add('green');
                updateKeyColor(letter, 'green');
            } else if (ch === '?') {
                tile.classList.add('orange');
                updateKeyColor(letter, 'orange');
            } else if (ch === '_') {
                // Instead of adding "black-tile", we add "gray" to the board tile.
                tile.classList.add('gray');
                updateKeyColor(letter, 'black');  // For keyboard keys, still mark as "black".
            }
        }
    }


    function updateKeyColor(letter, newColor) {
        const priority = { 'grey': 1, 'black': 2, 'orange': 3, 'green': 4 };
        let current = letterColors[letter] || 'grey';
        if (priority[newColor] > priority[current]) {
            letterColors[letter] = newColor;
            const keyButton = document.querySelector(`button.key[data-letter="${letter}"]`);
            if (keyButton) {
                keyButton.classList.remove('key-black', 'key-orange', 'key-green');
                if (newColor === 'black') {
                    keyButton.classList.add('key-black');
                } else if (newColor === 'orange') {
                    keyButton.classList.add('key-orange');
                } else if (newColor === 'green') {
                    keyButton.classList.add('key-green');
                }
            }
        }
    }

    function resetGame() {
        const username = sessionStorage.getItem("username");
        if (!username) {
            alert("Username not found. Please reload the page.");
            return;
        }
        sessionStorage.removeItem("wordleGuesses");
        sessionStorage.removeItem("gameEnded");
        sessionStorage.setItem("initialized", "true");

        fetch(`/api/wordle/reset?username=${encodeURIComponent(username)}`, { method: "POST" })
                .then(() => {
                    sessionStorage.removeItem("gameEnded");
                    window.location.href = "/";
                });
    }


    function updateActiveCell(setActive = true) {
        for (let col = 0; col < 5; col++) {
            const tile = document.getElementById(`tile-${currentRow}-${col}`);
            if (tile) {
                tile.classList.remove('active');
            }
        }
        if (setActive) {
            const activeTile = document.getElementById(`tile-${currentRow}-${currentCol}`);
            if (activeTile && !isGameOver) {
                activeTile.classList.add('active');
            }
        }
    }

    function animateInvalidGuess() {
        for (let col = 0; col < 5; col++) {
            const tile = document.getElementById(`tile-${currentRow}-${col}`);
            if (tile) {
                tile.textContent = "";
                tile.classList.add("shake");

                // Remove the animation after finishing (so that it can be repeated if it fails again).
                tile.addEventListener("animationend", () => {
                    tile.classList.remove("shake");
                }, { once: true });
            }
        }
        // Restart the visual and logical cursor, and clean row in memory
        guessRows[currentRow] = ["", "", "", "", ""];
        currentTile = 0;
        currentCol = 0;

        updateActiveCell(); // already makes the cursor visual set correctly
    }

    function animateErrorMessage() {
        const resultElem = document.getElementById("result");

        // Removes any previous animation
        resultElem.classList.remove("error-flash");

        // Force reflow to restart animation
        void resultElem.offsetWidth;

        // Add class with animation
        resultElem.classList.add("error-flash");

        // Automatic cleaning at the end of animation
        resultElem.addEventListener("animationend", () => {
            resultElem.classList.remove("error-flash");
        }, { once: true });
    }


    function initBoard() {
        updateActiveCell();
    }


    function rowHasFilledCells(row) {
        return Array.from(row.querySelectorAll('.cell')).some(cell => cell.textContent.trim() !== "");
    }

    document.addEventListener("DOMContentLoaded", () => {
        const sortSelect = document.getElementById("sort-select");

        if (sortSelect) {
            fetchAndRenderLeaderboard();
            sortSelect.addEventListener("change", fetchAndRenderLeaderboard);
        }
    });


    function fetchAndRenderLeaderboard() {
        const sortSelect = document.getElementById("sort-select");
        if (!sortSelect) return;

        const sort = sortSelect.value;

        fetch(`/api/wordle/leaderboard?orderBy=${sort}`)
                .then(res => res.json())
                .then(data => renderLeaderboard(data))
                .catch(err => {
                    console.error("Failed to fetch leaderboard", err);
                });
    }


    function renderLeaderboard(entries) {
        const tbody = document.querySelector("#leaderboard-table tbody");
        tbody.innerHTML = "";

        entries.forEach(entry => {
            const row = document.createElement("tr");
            row.innerHTML = `
            <td>${entry.username}</td>
            <td>${entry.word}</td>
            <td>${entry.attempts}</td>
            <td>${new Date(entry.date).toLocaleString()}</td>
        `;
            tbody.appendChild(row);
        });
    }


</script>
</body>
</html>
